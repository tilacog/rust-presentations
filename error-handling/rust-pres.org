#+TITLE:     Handle Errors in Rust
#+AUTHOR:    Tiago Guimarães
#+EMAIL:     tilacog@protonmail.com
#+DATE:      2021-03-10 Wed
#+OPTIONS: num:nil toc:nil
#+REVEAL_ROOT: file:///home/tilacog/tiago/code/others/reveal.js-4.1.0
#+REVEAL_HLEVEL: 2
#+REVEAL_EXTRA_CSS: file:///home/tilacog/tiago/presentations/rust-learning/custom.css
#+REVEAL_INIT_OPTIONS: width:1300

* Handle Errors in Rust
** Introduction
[[https://play.rust-lang.org][Rust Playground]]
** Panic
*** fatal errors
#+begin_src rust
fn main() {
    panic!("Farewell!");
}
#+end_src

*** out of bounds array access
#+begin_src rust
fn main() {
    let v = vec![0, 1, 2, 3];
    println!("{}", v[6]); // this will cause a panic!
}
#+end_src

** Option

*** The =Option= type
#+begin_src rust
enum Option<T> {
    None,     // No element was found
    Some(T),  // An element of type T was found
}
#+end_src

*** Using =Option= on collections
#+begin_src rust
fn main() {
    let fruits = ["banana", "apple", "coconut", "orange", "strawberry"];

    // pick the first item:
    let first = fruits.get(0);
    println!("{:?}", first);

    // pick the third item:
    let third = fruits.get(2);
    println!("{:?}", third);

    // pick the 99th item, which is non-existent:
    let non_existent = fruits.get(99);
    println!("{:?}", non_existent);
}
#+end_src

*** Pattern Matching
#+begin_src rust
fn main() {
    let fruits = vec!["banana", "apple", "coconut", "orange", "strawberry"];

    for &index in [0, 2, 99].iter() {
        match fruits.get(index) {
            Option::Some(fruit_name) => println!("It's a delicious {}!", fruit_name),
            Option::None => println!("There is no fruit! :("),
        }
    }
}
#+end_src

*** Pattern Matching
#+begin_src rust
fn main() {
    let fruits = vec!["banana", "apple", "coconut", "orange", "strawberry"];
    for &index in [0, 2, 99].iter() {
        match fruits.get(index) {
            Some(&"coconut") => println!("Coconuts are awesome!!!"),
            Some(fruit_name) => println!("It's a delicious {}!", fruit_name),
            None => println!("There is no fruit! :("),
        }
    }
}
#+end_src

*** =if let=
#+begin_src rust
// ugly code
let some_number: Option<u8> = Some(7);
match some_number {
    Some(7) => println!("That's my lucky number!"),
    _ => (),
}
#+end_src

*** =if let=
#+begin_src rust
// beautiful code
let some_number: Option<u8> = Some(7);
if let Some(7) = some_u8_value {
    println!("That's my lucky number!");
}
#+end_src

*** unwrap and expect
#+begin_src rust
let gift = Some("candy");
assert_eq!(gift.unwrap(), "candy");

let empty_gift: Option<&str> = None;
assert_eq!(empty_gift.unwrap(), "candy"); // This will panic!
#+end_src

*** expect
#+begin_src rust
let a = Some("banana");
assert_eq!(a.expect("not a banana!"), "banana");

let b: Option<&str> = None;
b.expect("where are my bananas?"); // panics with `fruits are healthy`
#+end_src

*** =unwrap_or=
#+begin_src rust
assert_eq!(Some("dog").unwrap_or("cat"), "dog");
assert_eq!(None.unwrap_or("cat"), "cat");
#+end_src

** Result

*** the =Result= enum
#+begin_src rust
enum Result<T, E> {
    Ok(T):  // A value T was obtained.
    Err(E): // An error of type E was encountered instead.
}
#+end_src

*** Safe Division by Zero
#+begin_src rust
#[derive(Debug)]
struct DivisionByZeroError;

fn safe_division(dividend: f64, divisor: f64) -> Result<f64, DivisionByZeroError> {
    if divisor == 0.0 {
        Err(DivisionByZeroError)
    } else {
        Ok(dividend / divisor)
    }
}

fn main() {
    println!("{:?}", safe_division(9.0, 3.0));
    println!("{:?}", safe_division(4.0, 0.0));
    println!("{:?}", safe_division(0.0, 2.0));
}
#+end_src

*** Propagating errors

Long way: without the =?= operator

#+begin_src rust
#![allow(unused)]
use std::fs::File;
use std::io;
use std::io::Read;

fn main() {
    fn read_username_from_file() -> Result<String, io::Error> {
        let f = File::open("hello.txt");

        let mut f = match f {
            Ok(file) => file,
            Err(e) => return Err(e),
        };

        let mut s = String::new();

        match f.read_to_string(&mut s) {
            Ok(_) => Ok(s),
            Err(e) => Err(e),
        }
    }
}
#+end_src

*** Propagating errors

Using the =?= operator

#+begin_src rust
#![allow(unused)]
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() -> Result<String, io::Error> {
    let mut f = File::open("hello.txt")?;
    let mut s = String::new();
    f.read_to_string(&mut s)?;
    Ok(s)
}
#+end_src

*** Propagating errors

Chaining the =?= operator

#+begin_src rust
#![allow(unused)]
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() -> Result<String, io::Error> {
    let mut s = String::new();

    File::open("hello.txt")?.read_to_string(&mut s)?;

    Ok(s)
}
#+end_src

*** Propagating errors

Even better

#+begin_src rust
use std::fs;
use std::io;

fn read_username_from_file() -> Result<String, io::Error> {
    fs::read_to_string("hello.txt")
}
#+end_src

** Knowledge Check
https://docs.microsoft.com/en-us/learn/modules/rust-error-handling/7-check

** Pesquisa
Estamos constantemente nos esforçando para melhorar nossos conteúdos
e agradeceríamos se você pudesse responder esta breve pesquisa.

- https://aka.ms/reactor-pesquisa

- Por favor, insira o código ~12518~ no início da pesquisa
